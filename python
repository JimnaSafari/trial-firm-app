import requests
from flask import Flask, render_template, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
import threading
import time
import random
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, UserMixin, login_user, login_required, current_user

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///farm.db'
app.config['SECRET_KEY'] = 'your-secret-key-here'
db = SQLAlchemy(app)

# Initialize Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Configuration
OPENWEATHER_API_KEY = "your_api_key_here"
FARM_LOCATION = "40.7128,-74.0060"

# Models
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    farms = db.relationship('Farm', backref='owner', lazy=True)

class Farm(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    location = db.Column(db.String(120), nullable=False)
    crop_type = db.Column(db.String(80), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    sensors = db.relationship('SensorData', backref='farm', lazy=True)
    alerts = db.relationship('Alert', backref='farm', lazy=True)

class SensorData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    soil_moisture = db.Column(db.Float)
    soil_temp = db.Column(db.Float)
    air_temp = db.Column(db.Float)
    humidity = db.Column(db.Float)
    farm_id = db.Column(db.Integer, db.ForeignKey('farm.id'), nullable=False)

class Alert(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    alert_type = db.Column(db.String(80), nullable=False)
    severity = db.Column(db.String(20), nullable=False)
    message = db.Column(db.String(200), nullable=False)
    resolved = db.Column(db.Boolean, default=False)
    farm_id = db.Column(db.Integer, db.ForeignKey('farm.id'), nullable=False)

# Create database tables
with app.app_context():
    db.create_all()

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Simulation Thread
def sensor_simulator():
    with app.app_context():
        while True:
            farms = Farm.query.all()
            for farm in farms:
                # Generate realistic sensor data with some randomness
                new_data = SensorData(
                    soil_moisture=max(10, min(80, random.gauss(45, 10))),
                    soil_temp=max(10, min(35, random.gauss(22, 3))),
                    air_temp=max(15, min(40, random.gauss(25, 5))),
                    humidity=max(30, min(90, random.gauss(60, 10))),
                    farm_id=farm.id
                )
                db.session.add(new_data)
                
                # Check for alerts
                check_for_alerts(farm, new_data)
                
            db.session.commit()
            time.sleep(30)  # Update every 30 seconds

def check_for_alerts(farm, sensor_data):
    """Generate alerts based on sensor thresholds"""
    # Soil moisture alerts
    if sensor_data.soil_moisture < 30:
        create_alert(farm, "Low Soil Moisture", "high", 
                    f"Soil moisture critically low at {sensor_data.soil_moisture}%")
    elif sensor_data.soil_moisture > 70:
        create_alert(farm, "High Soil Moisture", "medium", 
                    f"Soil moisture high at {sensor_data.soil_moisture}%")
    
    # Temperature alerts
    if sensor_data.air_temp > 35:
        create_alert(farm, "High Temperature", "high", 
                    f"Air temperature very high at {sensor_data.air_temp}Â°C")
    
    # Simulate occasional pest detection (10% chance)
    if random.random() < 0.1:
        pests = ["Aphids", "Whiteflies", "Spider Mites", "Caterpillars"]
        create_alert(farm, "Pest Detected", "high", 
                    f"{random.choice(pests)} detected in field")

def create_alert(farm, alert_type, severity, message):
    """Create a new alert in the database"""
    alert = Alert(
        alert_type=alert_type,
        severity=severity,
        message=message,
        farm_id=farm.id
    )
    db.session.add(alert)
    db.session.commit()

# Routes
@app.route('/')
@login_required
def dashboard():
    farm = Farm.query.filter_by(user_id=current_user.id).first()
    if not farm:
        return render_template('setup_farm.html')
    
    weather = get_weather_forecast()
    sensor_data = SensorData.query.filter_by(farm_id=farm.id).order_by(SensorData.timestamp.desc()).first()
    alerts = Alert.query.filter_by(farm_id=farm.id, resolved=False).order_by(Alert.timestamp.desc()).limit(5).all()
    
    # Get 24h history for charts
    time_24h_ago = datetime.utcnow() - timedelta(hours=24)
    history = SensorData.query.filter(
        SensorData.farm_id == farm.id,
        SensorData.timestamp >= time_24h_ago
    ).order_by(SensorData.timestamp).all()
    
    # Prepare chart data
    chart_labels = [data.timestamp.strftime("%H:%M") for data in history]
    moisture_data = [data.soil_moisture for data in history]
    temp_data = [data.air_temp for data in history]
    
    return render_template('dashboard.html', 
                         farm=farm,
                         sensors=sensor_data,
                         weather=weather,
                         alerts=alerts,
                         chart_labels=chart_labels,
                         moisture_data=moisture_data,
                         temp_data=temp_data)

# API Endpoints
@app.route('/api/sensor_data', methods=['GET'])
@login_required
def api_sensor_data():
    farm = Farm.query.filter_by(user_id=current_user.id).first()
    if not farm:
        return jsonify({"error": "No farm setup"}), 404
    
    limit = request.args.get('limit', default=100, type=int)
    sensor_data = SensorData.query.filter_by(farm_id=farm.id).order_by(SensorData.timestamp.desc()).limit(limit).all()
    
    return jsonify([{
        "timestamp": data.timestamp.isoformat(),
        "soil_moisture": data.soil_moisture,
        "soil_temp": data.soil_temp,
        "air_temp": data.air_temp,
        "humidity": data.humidity
    } for data in sensor_data])

@app.route('/api/resolve_alert/<int:alert_id>', methods=['POST'])
@login_required
def resolve_alert(alert_id):
    alert = Alert.query.get_or_404(alert_id)
    if alert.farm.owner.id != current_user.id:
        return jsonify({"error": "Unauthorized"}), 403
    
    alert.resolved = True
    db.session.commit()
    return jsonify({"status": "success"})

if __name__ == '__main__':
    # Start sensor simulation thread
    sensor_thread = threading.Thread(target=sensor_simulator)
    sensor_thread.daemon = True
    sensor_thread.start()
    
    app.run(host='0.0.0.0', port=5000, debug=True)
